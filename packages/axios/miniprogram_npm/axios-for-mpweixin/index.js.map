{"version":3,"sources":["axios.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\r\n * Axios 实体类\r\n * @param options 实例参数 支持 Loading baseUrl loadingAwait loadingMask\r\n * @param get GET请求方法\r\n * @param post POST请求方法\r\n * @param all 并发请求 Promise.all\r\n * @param race 并发  Promise.race\r\n */\r\nclass Axios {\r\n  constructor(options) {\r\n    this.loading = options.loading || 'Loading...'\r\n    this.baseUrl = options.baseUrl || ''\r\n    this.loadingAwait = options.loadingAwait || 800\r\n    this.loadingMask = options.loadingMask || true\r\n    this.timeout = options.timeout || 0\r\n    this.interceptors = {\r\n      request: new InterceptorManager(),\r\n      response: new InterceptorManager(),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.get(api[, data, config])\r\n   */\r\n  get(url, ...args) {\r\n    return wxRequest(this, 'GET', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * POST请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.post(url[, data[, config]])\r\n   */\r\n  post(url, ...args) {\r\n    return wxRequest(this, 'POST', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * DELETE请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.delete(url[, config])\r\n   */\r\n  delete(url, ...args) {\r\n    return wxRequest(this, 'DELETE', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * OPTIONS请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.options(url[, data[, config]])\r\n   */\r\n  options(url, ...args) {\r\n    return wxRequest(this, 'OPTIONS', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * HEAD请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.head(url[, data[, config]])\r\n   */\r\n  head(url, ...args) {\r\n    return wxRequest(this, 'HEAD', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * PUT请求\r\n   * @param {String} url —— API 地址\r\n   * @param {Object} args —— 参数列表， 如下格式\r\n   * axios.put(url[, data[, config]])\r\n   */\r\n  put(url, ...args) {\r\n    return wxRequest(this, 'PUT', url, args[0] || {}, args[1] || {})\r\n  }\r\n\r\n  /**\r\n   * 并发请求\r\n   * @param {Array<Promise>} promises 请求列表\r\n   */\r\n  all(promises) {\r\n    return Promise.all(promises)\r\n  }\r\n\r\n  /**\r\n   * 并发请求\r\n   * @param {Array<Promise>} promises 请求列表\r\n   */\r\n  race(promises) {\r\n    return Promise.race(promises)\r\n  }\r\n\r\n  /**\r\n   * 回调函数展开\r\n   * @param {Array<Function>} callback 回调函数列表\r\n   */\r\n  spread(callback) {\r\n    return function wrap(arr) {\r\n      return callback.apply(null, arr)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 公共请求方法\r\n * @param {String} type 请求方式\r\n * @param {String} api 接口地址\r\n * @param {Object} data 请求体\r\n * @param {Object} options 附加参数\r\n */\r\nfunction wxRequest(ref, type, api, data = {}, options) {\r\n  const { request, response } = ref.interceptors // 拦截器\r\n  let config = {\r\n    // 请求配置项\r\n    header: {},\r\n    timeout: ref.timeout || 0,\r\n    dataType: 'json',\r\n    responseType: 'text',\r\n    enableHttp2: false,\r\n    enableQuic: false,\r\n    enableCache: false,\r\n    baseUrl: ref.baseUrl,\r\n    loading: ref.loading,\r\n    loadingAwait: ref.loadingAwait,\r\n    loadingMask: ref.loadingMask,\r\n    data: data,\r\n  }\r\n\r\n  let timer = null // 请求Loading 延迟\r\n\r\n  return new Promise((resolve, reject) => {\r\n    if (request.handlers.length > 0) {\r\n      config = request.handlers[0].call(this, config) // request 拦截器\r\n    }\r\n\r\n    let header = {\r\n      ...config.header,\r\n      ...options.header,\r\n    }\r\n\r\n    Reflect.deleteProperty(config, 'header')\r\n    Reflect.deleteProperty(options, 'header')\r\n\r\n    config = {\r\n      ...config,\r\n      ...options,\r\n      header,\r\n    }\r\n\r\n    if (config.loading) {\r\n      // 下面的作用是在极短的 pendding 内不显示 Loading 以获得更好的用户体验\r\n      if (timer) clearTimeout(timer)\r\n      timer = setTimeout(() => {\r\n        wx.showLoading({\r\n          title: config.loading,\r\n          mask: config.loadingMask,\r\n        })\r\n      }, config.loadingAwait)\r\n    }\r\n\r\n    wx.request({\r\n      url: `${config.baseUrl}${api}`,\r\n      method: type,\r\n      data: data,\r\n      ...config,\r\n      success: (res) => {\r\n        if (timer) clearTimeout(timer)\r\n        if (response.handlers.length > 0) {\r\n          resolve(\r\n            response.handlers[0].call(this, {\r\n              ...res,\r\n              header: { ...res.header, ...header },\r\n              config: config,\r\n            }) || {}\r\n          )\r\n        } else {\r\n          resolve(res)\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        if (response.handlers.length > 1) {\r\n          reject(response.handlers[1].call(this, err))\r\n        } else {\r\n          reject(err)\r\n        }\r\n      },\r\n      complete: () => {\r\n        if (config.loading) wx.hideLoading()\r\n        config = null\r\n        header = null\r\n        timer = null\r\n      },\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 拦截器\r\n */\r\nfunction InterceptorManager() {\r\n  this.handlers = []\r\n}\r\n\r\n/**\r\n * 拦截器方法\r\n */\r\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\r\n  this.handlers.push(fulfilled, rejected)\r\n}\r\n\r\n/**\r\n * 初始化Axios\r\n * @param {Object} defaults Axios 实例化参数\r\n */\r\nconst axios = function (defaults = {}) {\r\n  return new Axios(defaults)\r\n}\r\n\r\nmodule.exports = {\r\n  axios,\r\n}\r\n"]}